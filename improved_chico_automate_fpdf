from flask import Flask, render_template_string, request, jsonify, send_file
from io import BytesIO
import requests
import pdfkit
from flask import Response
import math
import os
import datetime
import json
from fpdf import FPDF
import io
import polyline

app = Flask(__name__)

# Lista de estados brasileiros para fallback
ESTADOS_FALLBACK = [
    {"id": "AC", "text": "Acre"},
    {"id": "AL", "text": "Alagoas"},
    {"id": "AP", "text": "Amapá"},
    {"id": "AM", "text": "Amazonas"},
    {"id": "BA", "text": "Bahia"},
    {"id": "CE", "text": "Ceará"},
    {"id": "DF", "text": "Distrito Federal"},
    {"id": "ES", "text": "Espírito Santo"},
    {"id": "GO", "text": "Goiás"},
    {"id": "MA", "text": "Maranhão"},
    {"id": "MT", "text": "Mato Grosso"},
    {"id": "MS", "text": "Mato Grosso do Sul"},
    {"id": "MG", "text": "Minas Gerais"},
    {"id": "PA", "text": "Pará"},
    {"id": "PB", "text": "Paraíba"},
    {"id": "PR", "text": "Paraná"},
    {"id": "PE", "text": "Pernambuco"},
    {"id": "PI", "text": "Piauí"},
    {"id": "RJ", "text": "Rio de Janeiro"},
    {"id": "RN", "text": "Rio Grande do Norte"},
    {"id": "RS", "text": "Rio Grande do Sul"},
    {"id": "RO", "text": "Rondônia"},
    {"id": "RR", "text": "Roraima"},
    {"id": "SC", "text": "Santa Catarina"},
    {"id": "SP", "text": "São Paulo"},
    {"id": "SE", "text": "Sergipe"},
    {"id": "TO", "text": "Tocantins"}
]

# Tabela de custos expandida
TABELA_CUSTOS = {
    "0-20": {"VAN": 250, "3/4": 350, "TOCO": 450, "TRUCK": 550, "CARRETA": 1000},
    "20-50": {"VAN": 350, "3/4": 450, "TOCO": 550, "TRUCK": 700, "CARRETA": 1500},
    "50-100": {"VAN": 600, "3/4": 900, "TOCO": 1200, "TRUCK": 1500, "CARRETA": 2100},
    "100-150": {"VAN": 800, "3/4": 1100, "TOCO": 1500, "TRUCK": 1800, "CARRETA": 2600},
    "150-200": {"VAN": 1000, "3/4": 1500, "TOCO": 1800, "TRUCK": 2100, "CARRETA": 3000},
    "200-250": {"VAN": 1300, "3/4": 1800, "TOCO": 2100, "TRUCK": 2500, "CARRETA": 3300},
    "250-300": {"VAN": 1500, "3/4": 2100, "TOCO": 2500, "TRUCK": 2800, "CARRETA": 3800},
    "300-400": {"VAN": 1800, "3/4": 2500, "TOCO": 2800, "TRUCK": 3300, "CARRETA": 4300},
    "400-600": {"VAN": 2100, "3/4": 2900, "TOCO": 3500, "TRUCK": 3800, "CARRETA": 4800},
    "600-800": {"VAN": 2500, "3/4": 3300, "TOCO": 4000, "TRUCK": 4500, "CARRETA": 5500},
    "800-1000": {"VAN": 2900, "3/4": 3700, "TOCO": 4500, "TRUCK": 5200, "CARRETA": 6200},
    "1000-1500": {"VAN": 3500, "3/4": 4500, "TOCO": 5500, "TRUCK": 6500, "CARRETA": 8000},
    "1500-2000": {"VAN": 4500, "3/4": 5800, "TOCO": 7000, "TRUCK": 8500, "CARRETA": 10500},
    "2000-2500": {"VAN": 5500, "3/4": 7100, "TOCO": 8500, "TRUCK": 10500, "CARRETA": 13000},
    "2500-3000": {"VAN": 6500, "3/4": 8400, "TOCO": 10000, "TRUCK": 12500, "CARRETA": 15500},
    "3000-3500": {"VAN": 7500, "3/4": 9700, "TOCO": 11500, "TRUCK": 14500, "CARRETA": 18000},
    "3500-4000": {"VAN": 8500, "3/4": 11000, "TOCO": 13000, "TRUCK": 16500, "CARRETA": 20500},
    "4000-4500": {"VAN": 9500, "3/4": 12300, "TOCO": 14500, "TRUCK": 18500, "CARRETA": 23000},
}

# Histórico de pesquisas
HISTORICO_PESQUISAS = []

def geocode(municipio, uf):
    """Obtém coordenadas usando OpenStreetMap"""
    url = "https://nominatim.openstreetmap.org/search"
    params = {"q": f"{municipio}, {uf}, Brasil", "format": "json", "limit": 1}
    headers = {"User-Agent": "TransportCostCalculator/1.0"}
    try:
        response = requests.get(url, params=params, headers=headers, timeout=10)
        data = response.json()
        if data:
            return (float(data[0]["lat"]), float(data[0]["lon"]), data[0].get("display_name", ""))
        return None
    except Exception as e:
        print(f"Erro ao geocodificar: {e}")
        return None

def calcular_distancia_osrm(origem, destino):
    """Calcula distância de rota via OSRM"""
    try:
        url = f"http://router.project-osrm.org/route/v1/driving/{origem[1]},{origem[0]};{destino[1]},{destino[0]}"
        response = requests.get(url, params={"overview": "full"}, timeout=15)
        data = response.json()
        if data.get("code") == "Ok" and data.get("routes"):
            route = data["routes"][0]
            distance = route["distance"] / 1000  # km
            duration = route["duration"] / 60  # minutos
            geometry = route.get("geometry", "")
            
            route_points = []
            if geometry:
                try:
                    route_points = polyline.decode(geometry)
                except Exception as e:
                    print(f"Erro ao decodificar geometria: {e}")
            
            return {
                "distance": distance,
                "duration": duration,
                "route_points": route_points,
                "provider": "OSRM"
            }
        return None
    except Exception as e:
        print(f"Erro ao calcular rota OSRM: {e}")
        return None

def calcular_distancia_openroute(origem, destino):
    """Calcula distância de rota via OpenRouteService como backup"""
    try:
        url = "https://api.openrouteservice.org/v2/directions/driving-car"
        headers = {"Accept": "application/json"}
        params = {
            "start": f"{origem[1]},{origem[0]}",
            "end": f"{destino[1]},{destino[0]}"
        }
        response = requests.get(url, headers=headers, params=params, timeout=15)
        data = response.json()
        
        if "features" in data and data["features"]:
            route = data["features"][0]
            properties = route.get("properties", {})
            segments = properties.get("segments", [{}])[0]
            
            distance = segments.get("distance", 0) / 1000  # km
            duration = segments.get("duration", 0) / 60  # minutos
            
            geometry = route.get("geometry", {})
            route_points = []
            if geometry and "coordinates" in geometry:
                route_points = [[coord[1], coord[0]] for coord in geometry["coordinates"]]
            
            return {
                "distance": distance,
                "duration": duration,
                "route_points": route_points,
                "provider": "OpenRouteService"
            }
        return None
    except Exception as e:
        print(f"Erro ao calcular rota OpenRouteService: {e}")
        return None

def calcular_distancia_reta(origem, destino):
    """Distância em linha reta (Haversine)"""
    try:
        lat1, lon1 = origem[0], origem[1]
        lat2, lon2 = destino[0], destino[1]
        R = 6371
        phi1 = math.radians(lat1)
        phi2 = math.radians(lat2)
        dphi = math.radians(lat2 - lat1)
        dlambda = math.radians(lon2 - lon1)
        a = math.sin(dphi/2)**2 + math.cos(phi1)*math.cos(phi2)*math.sin(dlambda/2)**2
        c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))
        distance = R * c
        duration = (distance / 80) * 60
        route_points = [[lat1, lon1], [lat2, lon2]]
        return {"distance": distance, "duration": duration, "route_points": route_points, "provider": "Linha Reta"}
    except Exception as e:
        print(f"Erro ao calcular distância em linha reta: {e}")
        return None

def determinar_faixa(distancia):
    faixas = [
        (0, 20), (20, 50), (50, 100), (100, 150), (150, 200),
        (200, 250), (250, 300), (300, 400), (400, 600), (600, 800),
        (800, 1000), (1000, 1500), (1500, 2000), (2000, 2500),
        (2500, 3000), (3000, 3500), (3500, 4000), (4000, 4500)
    ]
    for min_val, max_val in faixas:
        if min_val < distancia <= max_val:
            return f"{min_val}-{max_val}"
    return None

def gerar_analise_trajeto(origem_info, destino_info, rota_info, custos):
    origem_nome = origem_info[2] if len(origem_info) > 2 else "Origem"
    destino_nome = destino_info[2] if len(destino_info) > 2 else "Destino"
    horas = int(rota_info["duration"] // 60)
    minutos = int(rota_info["duration"] % 60)
    tempo_estimado = f"{horas}h {minutos}min" if horas > 0 else f"{minutos}min"
    consumo_combustivel = rota_info["distance"] / 10
    emissao_co2 = consumo_combustivel * 2.3
    pedagio_estimado = rota_info["distance"] * 0.15
    analise = {
        "origem": origem_nome, "destino": destino_nome,
        "distancia": round(rota_info["distance"], 2),
        "tempo_estimado": tempo_estimado,
        "duracao_minutos": round(rota_info["duration"], 2),
        "consumo_combustivel": round(consumo_combustivel, 2),
        "emissao_co2": round(emissao_co2, 2),
        "pedagio_estimado": round(pedagio_estimado, 2),
        "provider": rota_info["provider"], "custos": custos,
        "data_hora": datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S"),
        "rota_pontos": rota_info["route_points"]
    }
    return analise

class PDF(FPDF):
    def header(self):
        self.set_font("Arial", "B", 15)
        self.cell(0, 10, "📦 PortoEx - Relatório de Transporte", 0, 1, "C")
        self.line(10, 20, 200, 20)
        self.ln(10)
        
    def footer(self):
        self.set_y(-15)
        self.set_font("Arial", "I", 8)
        self.cell(0, 10, f"Página {self.page_no()}", 0, 0, "C")
        self.cell(0, 10, f"© {datetime.datetime.now().year} PortoEx - Todos os direitos reservados", 0, 0, "R")

@app.route("/")
def index():
    return render_template_string(HTML_TEMPLATE)

@app.route("/estados")
def estados():
    try:
        # Tenta buscar da API do IBGE primeiro
        response = requests.get("https://servicodados.ibge.gov.br/api/v1/localidades/estados?orderBy=nome", timeout=3) # Timeout reduzido
        response.raise_for_status() 
        estados_data = response.json()
        print("Estados carregados da API IBGE.")
        return jsonify([{"id": e["sigla"], "text": e["nome"]} for e in estados_data])
    except requests.exceptions.RequestException as e:
        print(f"Erro ao buscar estados da API do IBGE: {e}. Usando fallback.")
        return jsonify(ESTADOS_FALLBACK)

@app.route("/municipios/<uf>")
def municipios(uf):
    try:
        response = requests.get(f"https://servicodados.ibge.gov.br/api/v1/localidades/estados/{uf}/municipios", timeout=5)
        response.raise_for_status()
        return jsonify([{"id": m["nome"], "text": m["nome"]} for m in response.json()])
    except requests.exceptions.RequestException as e:
        print(f"Erro ao buscar municípios da API do IBGE para {uf}: {e}. Retornando lista vazia.")
        return jsonify([]) 

@app.route("/calcular", methods=["POST"])
def calcular():
    data = request.json
    municipio_origem = data["municipio_origem"]
    uf_origem = data["uf_origem"]
    municipio_destino = data["municipio_destino"]
    uf_destino = data["uf_destino"]
    coord_origem = geocode(municipio_origem, uf_origem)
    coord_destino = geocode(municipio_destino, uf_destino)
    if not coord_origem or not coord_destino:
        return jsonify({"error": "Não foi possível identificar os locais"}), 400
    rota_info = calcular_distancia_osrm(coord_origem, coord_destino)
    if not rota_info:
        rota_info = calcular_distancia_openroute(coord_origem, coord_destino)
    if not rota_info:
        rota_info = calcular_distancia_reta(coord_origem, coord_destino)
        if not rota_info:
            return jsonify({"error": "Não foi possível calcular a distância"}), 500
    distancia = rota_info["distance"]
    faixa = determinar_faixa(distancia)
    if not faixa:
        return jsonify({"error": "Distância fora da faixa suportada (acima de 4500 km)"}), 400
    custos = TABELA_CUSTOS[faixa]
    analise = gerar_analise_trajeto(coord_origem, coord_destino, rota_info, custos)
    HISTORICO_PESQUISAS.append(analise)
    if len(HISTORICO_PESQUISAS) > 50:
        HISTORICO_PESQUISAS.pop(0)
    return jsonify({
        "distancia": round(distancia, 2),
        "duracao": round(rota_info["duration"], 2),
        "tipo_distancia": rota_info["provider"],
        "custos": custos,
        "rota_pontos": rota_info["route_points"],
        "analise": analise
    })

@app.route("/historico")
def historico():
    return jsonify(HISTORICO_PESQUISAS)

@app.route("/gerar-pdf", methods=["POST"])
def gerar_pdf():
    data = request.json
    analise = data.get("analise")
    if not analise:
        return jsonify({"error": "Dados de análise não fornecidos"}), 400
    pdf = PDF()
    pdf.add_page()
    pdf.set_font("Arial", "B", 16)
    pdf.cell(0, 10, "Análise de Trajeto", 0, 1, "L")
    pdf.set_font("Arial", "", 10)
    pdf.cell(0, 10, f"Data: {analise['data_hora']}", 0, 1, "L")
    pdf.ln(5)
    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 10, "Rota", 0, 1, "L")
    pdf.set_font("Arial", "", 10)
    pdf.cell(0, 8, f"Origem: {analise['origem']}", 0, 1, "L")
    pdf.cell(0, 8, f"Destino: {analise['destino']}", 0, 1, "L")
    pdf.cell(0, 8, f"Método de cálculo: {analise['provider']}", 0, 1, "L")
    pdf.ln(5)
    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 10, "Estatísticas", 0, 1, "L")
    pdf.set_font("Arial", "", 10)
    stats = [
        ["Distância total", f"{analise['distancia']} km"],
        ["Tempo estimado", f"{analise['tempo_estimado']}"],
        ["Consumo estimado", f"{analise['consumo_combustivel']} L"],
        ["Emissão de CO₂", f"{analise['emissao_co2']} kg"]
    ]
    for stat in stats:
        pdf.set_font("Arial", "B", 10)
        pdf.cell(80, 8, stat[0], 1, 0, "L")
        pdf.set_font("Arial", "", 10)
        pdf.cell(80, 8, stat[1], 1, 1, "L")
    pdf.ln(5)
    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 10, "Custos por Tipo de Veículo", 0, 1, "L")
    pdf.set_font("Arial", "B", 10)
    pdf.cell(80, 8, "Tipo de Veículo", 1, 0, "C")
    pdf.cell(80, 8, "Custo (R$)", 1, 1, "C")
    pdf.set_font("Arial", "", 10)
    for veiculo, valor in analise["custos"].items():
        pdf.cell(80, 8, veiculo, 1, 0, "L")
        pdf.cell(80, 8, f"R$ {valor:.2f}", 1, 1, "R")
    pdf.ln(5)
    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 10, "Informações Adicionais", 0, 1, "L")
    pdf.set_font("Arial", "", 10)
    pdf.cell(0, 8, f"Pedágio estimado: R$ {analise['pedagio_estimado']:.2f}", 0, 1, "L")
    pdf.ln(5)
    pdf.multi_cell(0, 8, "Observações: Os valores apresentados são estimativas baseadas em cálculos aproximados e podem variar de acordo com condições específicas da rota, clima, tráfego e outros fatores.", 0, "L")
    pdf_output = io.BytesIO()
    pdf.output(pdf_output)
    pdf_output.seek(0)
    return send_file(
        pdf_output,
        mimetype="application/pdf",
        as_attachment=True,
        download_name=f'relatorio_transporte_{datetime.datetime.now().strftime("%Y%m%d_%H%M%S")}.pdf'
    )
    
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <title>PortoEx - Calculadora de Transporte</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Bibliotecas -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --bg-color: #ffffff;
            --text-color: #333333;
            --card-bg: #ffffff;
            --border-color: #e0e0e0;
            --header-color: #1a237e;
            --table-header: #f0f0f0;
            --table-border: #ccc;
            --primary-btn: #1a237e;
            --primary-btn-hover: #3949ab;
            --shadow-color: rgba(0,0,0,0.1);
        }
        body.dark-mode {
            --bg-color: #121212;
            --text-color: #f1f1f1;
            --card-bg: #1e1e1e;
            --border-color: #333;
            --header-color: #303f9f;
            --table-header: #2c2c2c;
            --table-border: #444;
            --primary-btn: #303f9f;
            --primary-btn-hover: #5c6bc0;
            --shadow-color: rgba(0,0,0,0.4);
        }
        body {
            margin: 0;
            font-family: 'Segoe UI', Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            transition: all 0.3s ease;
        }
        .container {
            max-width: 800px;
            margin: 40px auto;
            background: var(--card-bg);
            border-radius: 12px;
            box-shadow: 0 4px 20px var(--shadow-color);
            overflow: hidden;
        }
        header {
            background-color: var(--header-color);
            color: white;
            padding: 15px;
            text-align: center;
            position: relative;
        }
        header h1 {
            margin: 0;
            font-size: 24px;
            font-weight: 500;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        header h1 i {
            margin-right: 10px;
        }
        .theme-btn {
            position: absolute;
            top: 15px;
            right: 15px;
            background: transparent;
            border: none;
            color: white;
            font-size: 20px;
            cursor: pointer;
            z-index: 10;
            width: 35px;
            height: 35px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0.9;
        }
        .theme-btn:hover {
            background: rgba(255,255,255,0.1);
            opacity: 1;
        }
        .consulta-btn {
            background-color: white;
            color: #0078d4;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            margin-top: 10px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
        }
        .consulta-btn i {
            margin-right: 6px;
        }
        .form-container {
            padding: 25px;
        }
        .row {
            display: flex;
            margin-bottom: 10px;
            gap: 20px;
        }
        .col {
            flex: 1;
        }
        .form-group {
            margin-bottom: 15px;
        }
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--text-color);
        }
        select {
            width: 100%;
            padding: 10px;
            border-radius: 4px;
            border: 1px solid var(--border-color);
            background-color: var(--card-bg);
            color: var(--text-color);
        }
        .btn-calcular {
            width: 100%;
            padding: 12px;
            background-color: var(--primary-btn);
            color: white;
            border: none;
            border-radius: 4px;
            font-weight: bold;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-top: 20px;
        }
        .btn-calcular i {
            margin-right: 8px;
        }
        .btn-calcular:hover {
            background-color: var(--primary-btn-hover);
        }
        #map {
            height: 300px;
            width: 100%;
            margin: 20px 0;
            border-radius: 8px;
            box-shadow: 0 2px 10px var(--shadow-color);
            display: none;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }
        th, td {
            padding: 10px;
            text-align: center;
            border: 1px solid var(--table-border);
        }
        th {
            background-color: var(--table-header);
        }
        .resultado-info {
            background-color: var(--bg-color);
            border-radius: 8px;
            padding: 15px;
            font-size: 14px;
            line-height: 1.6;
        }
        .pdf-btn {
            background-color: white;
            color: #0078d4;
            border: 1px solid #0078d4;
            padding: 8px 16px;
            border-radius: 4px;
            margin-top: 15px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
        }
        .pdf-btn i {
            margin-right: 6px;
        }
        .loading {
            display: none;
            text-align: center;
            margin: 15px 0;
        }
        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 2s linear infinite;
            display: inline-block;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        @media (max-width: 768px) {
            .row {
                flex-direction: column;
                gap: 0;
            }
            .container {
                margin: 20px;
                width: calc(100% - 40px);
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1><i class="fa-solid fa-truck-fast"></i> PortoEx - Calculadora de Transporte</h1>
            <button id="theme-toggle" class="theme-btn" title="Alternar tema">
                <i class="fa-solid fa-moon" id="theme-icon"></i>
            </button>
            <div>
                <a href="https://onedrive.live.com/?id=7D2F1EE6EAD699A1%21s3c277927e98244b3a012f3122abe84a5&cid=7D2F1EE6EAD699A1&sb=name&sd=1" target="_blank" class="consulta-btn">
                    <i class="fa-solid fa-table-list"></i> Consultar Tabela de Agentes
                </a>
            </div>
        </header>
        <div class="form-container">
            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <label for="uf_origem">Estado de Origem</label>
                        <select id="uf_origem" class="select2-enable" data-placeholder="Selecione o estado"></select>
                    </div>
                    <div class="form-group">
                        <label for="municipio_origem">Município de Origem</label>
                        <select id="municipio_origem" class="select2-enable" data-placeholder="Selecione o município" disabled></select>
                    </div>
                </div>
                <div class="col">
                    <div class="form-group">
                        <label for="uf_destino">Estado de Destino</label>
                        <select id="uf_destino" class="select2-enable" data-placeholder="Selecione o estado"></select>
                    </div>
                    <div class="form-group">
                        <label for="municipio_destino">Município de Destino</label>
                        <select id="municipio_destino" class="select2-enable" data-placeholder="Selecione o município" disabled></select>
                    </div>
                </div>
            </div>
            <button id="btn_calcular" class="btn-calcular">
                <i class="fa-solid fa-calculator"></i> Calcular Custos
            </button>
            <div id="loading" class="loading">
                <div class="spinner"></div>
                <p>Calculando rota e custos...</p>
            </div>
            <div id="resultados" style="display: none;">
                <div id="map"></div>
                <table>
                    <thead>
                        <tr>
                            <th>Tipo de Veículo</th>
                            <th>Custo (R$)</th>
                        </tr>
                    </thead>
                    <tbody id="tabela-resultado"></tbody>
                </table>
                <div class="resultado-info">
                    <p><strong>Rota:</strong> <span id="res-origem"></span> → <span id="res-destino"></span></p>
                    <p><strong>Distância:</strong> <span id="res-distancia"></span> km</p>
                    <p><strong>Tempo estimado:</strong> <span id="res-tempo"></span></p>
                    <p><strong>Consumo estimado:</strong> <span id="res-consumo"></span> L</p>
                    <p><strong>Emissão de CO₂:</strong> <span id="res-co2"></span> kg</p>
                    <p><strong>Pedágio estimado:</strong> R$ <span id="res-pedagio"></span></p>
                </div>
                <button id="btn_gerar_pdf" class="pdf-btn">
                    <i class="fa-solid fa-file-pdf"></i> Salvar Relatório em PDF
                </button>
            </div>
        </div>
    </div>
    <script>
        // Tema claro/escuro
        function setTheme(mode) {
            if (mode === 'dark') {
                document.body.classList.add('dark-mode');
                document.getElementById('theme-icon').classList.replace('fa-moon', 'fa-sun');
            } else {
                document.body.classList.remove('dark-mode');
                document.getElementById('theme-icon').classList.replace('fa-sun', 'fa-moon');
            }
            localStorage.setItem('theme', mode);
        }
        $(document).ready(function() {
            // Tema
            const savedTheme = localStorage.getItem('theme') || 'light';
            setTheme(savedTheme);
            $('#theme-toggle').on('click', function() {
                const currentTheme = document.body.classList.contains('dark-mode') ? 'dark' : 'light';
                setTheme(currentTheme === 'dark' ? 'light' : 'dark');
            });

            // Select2 AJAX para estados e municípios (padrão IBGE via backend)
            $('#uf_origem, #uf_destino').select2({
                placeholder: "Selecione o estado",
                allowClear: true,
                theme: 'classic',
                ajax: {
                    url: '/estados',
                    dataType: 'json',
                    delay: 250,
                    processResults: function(data) {
                        return { results: data };
                    },
                    cache: true
                }
            });

            $('#uf_origem').on('change', function() {
                var uf = $(this).val();
                $('#municipio_origem').val(null).trigger('change');
                $('#municipio_origem').prop('disabled', !uf);
                if (uf) {
                    $('#municipio_origem').select2({
                        placeholder: "Selecione o município",
                        allowClear: true,
                        theme: 'classic',
                        ajax: {
                            url: '/municipios/' + uf,
                            dataType: 'json',
                            delay: 250,
                            processResults: function(data) {
                                return { results: data };
                            },
                            cache: true
                        }
                    });
                } else {
                    $('#municipio_origem').select2('destroy');
                }
            });

            $('#uf_destino').on('change', function() {
                var uf = $(this).val();
                $('#municipio_destino').val(null).trigger('change');
                $('#municipio_destino').prop('disabled', !uf);
                if (uf) {
                    $('#municipio_destino').select2({
                        placeholder: "Selecione o município",
                        allowClear: true,
                        theme: 'classic',
                        ajax: {
                            url: '/municipios/' + uf,
                            dataType: 'json',
                            delay: 250,
                            processResults: function(data) {
                                return { results: data };
                            },
                            cache: true
                        }
                    });
                } else {
                    $('#municipio_destino').select2('destroy');
                }
            });

            // Botão calcular
            $('#btn_calcular').on('click', function() {
                const ufOrigem = $('#uf_origem').val();
                const munOrigem = $('#municipio_origem').val();
                const ufDestino = $('#uf_destino').val();
                const munDestino = $('#municipio_destino').val();

                if (!ufOrigem || !munOrigem || !ufDestino || !munDestino) {
                    alert('Por favor, selecione origem e destino completos.');
                    return;
                }

                $('#loading').show();
                $('#resultados').hide();

                // Chama o backend para calcular rota real
                $.ajax({
                    url: '/calcular',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        uf_origem: ufOrigem,
                        municipio_origem: munOrigem,
                        uf_destino: ufDestino,
                        municipio_destino: munDestino
                    }),
                    success: function(resp) {
                        $('#loading').hide();
                        // Preenchimento da legenda
                        $('#res-origem').text(resp.analise.origem);
                        $('#res-destino').text(resp.analise.destino);
                        $('#res-distancia').text(resp.analise.distancia);
                        $('#res-tempo').text(resp.analise.tempo_estimado);
                        $('#res-consumo').text(resp.analise.consumo_combustivel);
                        $('#res-co2').text(resp.analise.emissao_co2);
                        $('#res-pedagio').text(resp.analise.pedagio_estimado);

                        // Preenchimento da tabela de custos
                        let htmlTabela = '';
                        for (let tipo in resp.custos) {
                            htmlTabela += `<tr>
                                <td>${tipo}</td>
                                <td>R$ ${resp.custos[tipo].toLocaleString('pt-BR', {minimumFractionDigits: 2})}</td>
                            </tr>`;
                        }
                        $('#tabela-resultado').html(htmlTabela);

                        // Exibe resultados
                        $('#resultados').show();

                        // Inicializa mapa com os pontos reais da rota
                        if (resp.rota_pontos && resp.rota_pontos.length > 1) {
                            initMapWithRoute(resp.rota_pontos);
                        } else {
                            $('#map').hide();
                        }
                    },
                    error: function(xhr) {
                        $('#loading').hide();
                        alert('Erro ao calcular rota: ' + xhr.responseText);
                    }
                });
            });

            // Função para inicializar o mapa com pontos reais
            function initMapWithRoute(rotaPontos) {
                $('#map').empty().show();
                setTimeout(function() {
                    const origem = rotaPontos[0];
                    const destino = rotaPontos[rotaPontos.length - 1];
                    const map = L.map('map', {zoomControl: false});
                    L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
                        attribution: 'Tiles &copy; Esri'
                    }).addTo(map);
                    let latlngs = rotaPontos.map(function(p) {
                        return Array.isArray(p) ? [p[0], p[1]] : [p.lat, p.lng];
                    });
                    L.polyline(latlngs, {
                        color: '#00e676',
                        weight: 6,
                        dashArray: '10, 12',
                        opacity: 0.9
                    }).addTo(map);
                    L.marker(latlngs[0]).addTo(map).bindPopup($('#res-origem').text()).openPopup();
                    L.marker(latlngs[latlngs.length-1]).addTo(map).bindPopup($('#res-destino').text());
                    map.fitBounds(latlngs);
                }, 100);
            }

            // Botão PDF (simulado)
            $('#btn_gerar_pdf').on('click', function() {
                alert('Relatório PDF gerado e salvo com sucesso!');
            });
        });
    </script>
</body>
</html>
"""

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=5006)
